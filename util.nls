; limpiar el patch sobre el que se encuentra la tortuga
to vacuum-patch
  ask turtles[
     if([pcolor] of patch-at 0 0 = brown)
     [
       set _REPEATPATCHCOUNTER 0
       show "Painted white"
       ;print-status _ROW _COLUMN _DIRECTION
       set pcolor white
     ]
  ]
end

; Encuentra el patch sucio mas cercano a la posicion actual de la aspiradora
to find-nearest-dust
  ask turtles[
    if _REPEATPATCHCOUNTER > 1 [ ;; No se si aca deberia ir un 1 o un 2
      let target-patch min-one-of (patches in-radius 25 with [pcolor = brown]) [distance myself]
      if target-patch != nobody  [
        ;show "SHould i actually be here?: find-nearest-dust"
        ;falta verificar aca que si hay un obstaculo entonces que se cambie la direccion de la tortuga: patch-ahead
        face target-patch fd 1
        ; move-to target-patch
      ]
    ]
  ]
end

; podriamos calcular la cantidad de veces que pasamos por un patch ya limpio?
; necesitamos la condicion de parada
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; verifica si la posicion x y esta dentro de los confines del mapa
to-report is-inside-border [x y]
  ;ifelse (x > (min-pxcor + 1)) and (x < (max-pxcor - 1)) and (y > (min-pycor + 1)) and (y < (max-pycor - 1))
  ifelse (x > (min-pxcor)) and (x < (max-pxcor)) and (y > (min-pycor)) and (y < (max-pycor))
  [report true]
  [report false]
end

; verifica si la posicion x y esta "sucia": pcolor cafe
to-report is-neighbor-dusty [x y]
  ask turtles[
    ifelse([pcolor] of patch-at x y = brown)
    [set _ISDUSTY true]
    [set _ISDUSTY false]
  ]
  report _ISDUSTY
end

; verifica si la posicion x y esta "sucia": pcolor cafe
to-report is-neighbor-clean [x y]
  ask turtles[
    ifelse([pcolor] of patch-at x y = white)
    [set _ISCLEAN true]
    [set _ISCLEAN false]
  ]
  report _ISCLEAN
end

to print-status [row column dir]
   show "column:"
   show column
   show "row:"
   show row
   show "DIRECTION"
   show dir

end

to setup-globals
  set direccion 90

  set _UP 0 ; Para dirigir el heading de la tortuga hacia el norte
  set _DOWN 180 ; Para dirigir el heading de la tortuga hacia el sur
  set _RIGHT 90 ; Para dirigir el heading de la tortuga hacia el este
  set _LEFT 270 ; Para dirigir el heading de la tortuga hacia el oeste
  set _ISDUSTY false ; Booleano que nos indica si un patch esta sucio
  set _ROW (min-pycor + 1) ; establecemos el valor inicial de fila con la coordenada y mas pequeña + 1 (dentro del recuadro)
  set _COLUMN (min-pxcor + 1) ; establecemos el valor inicial de columna con la coordenada x mas pequeña + 1 (dentro del recuadro)
  ask turtles[set heading _UP] ; Se establece la direccion de la tortuga hacia arriba
  ;set _DIRECTION _UP
  set _REPEATPATCHCOUNTER 0 ; Contador para saber si la aspiradora se quedo pegada. Si el malor es mayor a 1, provoca que se mueva al patch sucio mas cercano
  set _FOUNDDIRECTION 0 ; Variable para tener un semaforo cuando para un tick ya se encontró la direccion hacia la cual se dirige la aspiradora
  ;set CURRENT_PCOLOR 0
  ;set obstaculo 32
  set _NEXTDIR _RIGHT
  set _NEXTDIRCOUNT 0
  
  set-plot-pen-color brown
  
end